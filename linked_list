#include <stdio.h>
#include <stdlib.h>
typedef struct node
{
    int data;
    struct node *next;
}
node;
node *head = NULL;

int isempty(node *);
void create();
void insert_begin();
void insert_middle();
void insert_end();
void delete_begin();
void delete_middle();
void delete_end();
void traverse();

int main()
{
    int choice, c;
    do
    {
        if(isempty(head))
        {
            create();
        }
        else
        {
            printf("Operations of Linked list\n1.Insertion\n2.Deletion\n3.Traversal\nEnter your choice\n");
            scanf("%d", &choice);
            switch(choice)
            {
                case 1:
                    printf("Insertion types\n1.Insertion @ the begining\n2.Insertion in the middle\n3.Insertion @ the end\n");
                    int insert_choice;
                    printf("Enter your choice\n");
                    scanf("%d", &insert_choice);
                    switch(insert_choice)
                    {
                        case 1:
                            insert_begin();
                            break;
                        case 2:
                            insert_middle();
                            break;
                        case 3:
                            insert_end();
                            break;
                        default:
                            printf("Entered insertion choice is wrong\n");
                    }
                    break;
                case 2:
                    printf("Deletion types\n1.Deletion from the begining\n2.Deletion from the middle\n3.Deletion from the end\n");
                    int delete_choice;
                    printf("Enter your choice\n");
                    scanf("%d", &delete_choice);
                    switch(delete_choice)
                    {
                        case 1:
                            delete_begin();
                            break;
                        case 2:
                            delete_middle();
                            break;
                        case 3:
                            delete_end();
                            break;
                        default:
                            printf("Entered insertion choice is wrong\n");
                    }
                    break;
                case 3:
                    traverse();
                    break;
                default:
                    printf("entered choice is wrong");
            }
        }
        printf("Do you want to perform operations? any number for Yes and zero for No.\n");
        scanf("%i", &c);
    }while(c);
}

int isempty(node *head)
{
    if(head == NULL)
    {
        return 1;
    }
    return 0;
}
void create()
{
    struct node *newnode, *temp;
    int n;
    printf("Enter number of nodes: \n");
    scanf("%d", &n);
    for(int i = 0; i < n; i++)
    {
        newnode = malloc(sizeof(struct node));
        printf("Enter Data value: \n");
        scanf("%d", &newnode->data);
        newnode->next = NULL;
        if(head == NULL)
        {
            head=temp=newnode;
        }
        else
        {
            temp->next = newnode;
            temp = newnode;
        }
    }
}

void insert_begin()
{
    struct node *newnode;
    newnode = malloc(sizeof(head));
    printf("Enter data value: \n");
    scanf("%i", &newnode->data);
    newnode->next = head;
    head = newnode;
}

void insert_middle()
{
    struct node *newnode,*temp;
    newnode = malloc(sizeof(head));
    int p, i = 1;
    printf("Enter after which node you want to insert a new node: \n");
    scanf("%d", &p);
    printf("Enter data value: \n");
    scanf("%d", &newnode->data);
    temp = head;
    while(i<p)
    {
        temp=temp->next;
        i++;
    }
    
    newnode->next=temp->next;
    temp->next =newnode;
}

void insert_end()
{
    struct node *newnode,*temp;
    newnode = malloc(sizeof(head));
    printf("Enter data value: \n");
    scanf("%d", &newnode->data);
    newnode->next = NULL;
    temp = head;
    while(temp->next!= NULL)
    {
      temp=temp->next; 
    }
    temp->next = newnode;
}

void delete_begin()
{
    struct node *temp ;
    temp=head;
    head = head->next;
    free(temp);
}

void delete_middle()
{
    struct node *nextnode,*temp;
    int p,i=1;
    printf("which node you want to delete: \n");
    scanf("%d", &p);
    temp =head;
    while(i<p-1)
    {
        temp = temp->next;
        i++;
    }
    nextnode=temp->next;
    temp->next=nextnode->next;
    free(nextnode);
}

void delete_end()
{
    struct node *prevnode,*temp;
    temp =head;
    while(temp->next!=0)
    {
        prevnode = temp;
        temp = temp->next;
    }
    prevnode->next=0;
    free(temp);
}

void traverse()
{
    struct node *temp = head;
    while(temp != NULL)
    {
        printf("%d\n",temp->data);
        temp = temp->next;
    }
}
